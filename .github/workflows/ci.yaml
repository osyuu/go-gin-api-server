name: CI

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      TEST_DB_HOST: localhost
      TEST_DB_PORT: 5432
      TEST_DB_USER: postgres
      TEST_DB_PASSWORD: postgres
      TEST_DB_NAME: gin_api_server_test
      TEST_DB_SSLMODE: disable

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ${{ env.TEST_DB_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Verify dependencies
        run: go mod verify

      - name: Tidy dependencies
        run: go mod tidy

      - name: Run vet
        run: go vet ./...

      - name: Run database migrations
        run: |
          # 使用 docker run 執行 migration，避免與 CI 的 PostgreSQL 服務衝突
          docker run --rm \
            --network host \
            -v "$(pwd)/migrations:/migrations" \
            migrate/migrate \
            -path /migrations \
            -database "postgres://${{ env.TEST_DB_USER }}:${{ env.TEST_DB_PASSWORD }}@${{ env.TEST_DB_HOST }}:${{ env.TEST_DB_PORT }}/${{ env.TEST_DB_NAME }}?sslmode=${{ env.TEST_DB_SSLMODE }}" \
            up

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...
        env:
          DB_HOST: ${{ env.TEST_DB_HOST }}
          DB_PORT: ${{ env.TEST_DB_PORT }}
          DB_USER: ${{ env.TEST_DB_USER }}
          DB_PASSWORD: ${{ env.TEST_DB_PASSWORD }}
          DB_NAME: ${{ env.TEST_DB_NAME }}
          DB_SSLMODE: ${{ env.TEST_DB_SSLMODE }}
          TEST_DB_PORT: ${{ env.TEST_DB_PORT }}
          TEST_DB_NAME: ${{ env.TEST_DB_NAME }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m
