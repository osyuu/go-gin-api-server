services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: gin-api-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - gin-api-1
      - gin-api-2
      - gin-api-3
    networks:
      - gin-api-network

  # API Server Instance 1
  gin-api-1:
    build: .
    container_name: gin-api-1
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV}
      - PORT=${PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - gin-api-network

  # API Server Instance 2
  gin-api-2:
    build: .
    container_name: gin-api-2
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV}
      - PORT=${PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - gin-api-network

  # API Server Instance 3
  gin-api-3:
    build: .
    container_name: gin-api-3
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV}
      - PORT=${PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - gin-api-network

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: gin-api-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:${DB_PORT:-5432}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - gin-api-network

  # Database Migration
  migrate:
    image: migrate/migrate
    volumes:
      - ./migrations:/migrations
    command:
      [
        "-path",
        "/migrations",
        "-database",
        "postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=${DB_SSLMODE}",
        "up",
      ]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gin-api-network

volumes:
  postgres_data:

networks:
  gin-api-network:
    driver: bridge
